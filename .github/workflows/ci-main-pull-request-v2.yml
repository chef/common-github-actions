# WORK IN PROCESS
# MERGE INTO ci-main-pull-request-checks.yml WHEN DONE TESTING
# CI pipeline for all application types on main and release branches
# use stubs/ci-main-pull-request-checks-stub.yml in your repo to call this common action using workflow_call
#
# performs the following actions:
# 1. run source code complexity checks (SCC) using scc
# 2. run language-specific pre-compilation checks (e.g., gosec, rubocop, etc.)
# 3. run language-agnostic pre-compilation checks (e.g., OWASP dependency check)
# 4. run security source code analysis (SCA) scans (e.g., trufflehog, srcclr, veracode, blackduck)
# 5. run build and packaging steps (e.g., go build, cargo build, etc.)
# 6. run unit tests (e.g., go test, cargo test, etc.)
# 7. run security DAST tests and scans (e.g., SonarQube, BlackDuck coverity, BlackDuck polaris)
# 8. generate software bill-of-materials (SBOM) using SPDX format
# 
# https://docs.github.com/en/actions/sharing-automations/reusing-workflows#passing-inputs-and-secrets-to-a-reusable-workflow
  
name: CI flow containing PR checks for main & release, v2

on:
  workflow_call:
    inputs:
      language:
        description: 'Primary language in the repository, for language-specific checks'
        required: false
        type: string
        default: 'Go'
      visibility:
        description: 'Visibility of the repository'
        required: false
        type: string
        default: 'public' # (private, public, or internal)
      perform-complexity-checks: 
        description: 'Perform complexity checks with SCC'
        required: false
        type: boolean
        default: true
      scc-output-filename:
        description: 'Name of the SCC complexity output file artifact'
        required: false
        type: string
        default: 'scc-output.txt'
      perform-trufflehog-scan:
        description: 'Perform trufflehog scan'
        required: false
        type: boolean
        default: true
      perform-srcclr-scan:
        description: 'Perform source clear scan'
        required: false
        type: boolean
        default: true
      perform-veracode-sca-scan:
        description: 'Perform Veracode SCA scan'
        required: false
        type: boolean
        default: true
      perform-blackduck-sca-scan:
        description: 'Perform BlackDuck SCA scan'
        required: false
        type: boolean
        default: true
      build:
        description: 'CI Build (language-specific)'
        required: false
        type: boolean
        default: true
      unit-tests:
        description: 'Run unit tests (language-specific)'
        required: false
        type: boolean
        default: true
      perform-sonarqube-sca-scan: 
        description: 'Perform basic SonarQube scan'
        required: false
        type: boolean
        default: true
      perform-blackduck-coverity:
        description: 'Perform BlackDuck coverity scan'
        required: false
        type: boolean
        default: false
      perform-blackduck-polaris:
        description: 'Perform BlackDuck polaris scan'
        required: false
        type: boolean
        default: true
      generate-sbom:
        description: 'Generate software bill-of-materials (SPDX SBOM)'
        required: false
        type: boolean
        default: true
    
env:
  REPO_VISIBILITY: ${{ github.event.repository.visibility }}
  REPO_NAME: ${{ github.event.repository.name }}
  PIPELINE_VERSION: '1.0.0'

jobs:
  echo-inputs:
    name: 'Echo version of pipeline and inputs'
    runs-on: ubuntu-latest
    steps:
      - name: echo version of pipeline and inputs
        run: |
          echo "pipeline version $PIPELINE_VERSION"
          echo "Language set to ${{ inputs.language }} "
          echo "Repository visibility set to $REPO_VISIBILITY [ ${{ inputs.visibility }} ]"
          echo "*************************************************************"
          echo "BUILD set to ${{ inputs.build }}"
          echo "Unit tests set to ${{ inputs.unit-tests }}"
          echo "*************************************************************"
          echo "Perform complexity checks set to ${{ inputs.perform-complexity-checks }}"
          echo "SCC output filename set to ${{ inputs.scc-output-filename }} "
          echo "*************************************************************"
          echo "Perform trufflehog scan set to ${{ inputs.perform-trufflehog-scan }}"
          echo "Perform source clear scan set to ${{ inputs.perform-srcclr-scan }}"   
          echo "Perform Veracode SCA scan set to ${{ inputs.perform-veracode-sca-scan }}"
          echo "Perform BlackDuck SCA scan set to ${{ inputs.perform-blackduck-sca-scan }}"
          echo "*************************************************************"
          echo "Perform SonarQube scan set to ${{ inputs.perform-sonarqube-sca-scan }}"
          echo "Perform BlackDuck coverity scan set to ${{ inputs.perform-blackduck-coverity }}"
          echo "Perform BlackDuck polaris scan set to ${{ inputs.perform-blackduck-polaris }}"
          echo "Generate SBOM set to ${{ inputs.generate-sbom }}"
        # echo "The job_id is: $GITHUB_JOB"   
        # echo ${{ secrets.GITHUB_TOKEN }} DO NOT DO THIS
          
  ################################################################################################################
  #
  #    pre-compilation steps
  #
  ################################################################################################################
  
  # check out action
  checkout:
    name: 'Checkout'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

  # generate complexity metrics
  run-scc:
    if: ${{ inputs.perform-complexity-checks == true }}
    uses: chef/common-github-actions/.github/workflows/scc.yml@main
    with:
      outputfilename: ${{ inputs.scc-output-filename }}
    needs: echo-inputs

  # language specific tests (gosec, rubocop, linters, etc.)
  rust-language-specific-precompilation-checks:
    name: 'Rust-specific pre-compilation steps'  
    if: ${{ inputs.language == 'Rust' && inputs.perform-complexity-checks == true }}
    runs-on: ubuntu-latest
    needs: run-scc
    steps:
      - name: Run crate linter
        run: echo 'crate linter'
        # https://github.com/rust-lang/rust-clippy
        # cargo clippy --all-targets --all-features -- -D warnings

  ruby-language-specific-precompilation-checks:
    name: 'Ruby-specific pre-compilation steps'  
    if: ${{ inputs.language == 'Ruby' && inputs.perform-complexity-checks == true }}
    needs: run-scc
    # TODO: get with Marc/Prajakta on this sequece for Ruby uses: chef/common-github-actions/.github/workflows/rubocop.yml@main
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: 'Bundler Audit'
        uses: andrewmcodes/bundler-audit-action@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
  go-language-specific-precompilation-checks:
    name: 'Go-specific pre-compilation steps'  
    if: ${{ inputs.language == 'Go' && inputs.perform-complexity-checks == true }}
    runs-on: ubuntu-latest
    needs: run-scc
    steps:
      - name: Run go linter
        run: echo 'go linter'
        # https://github.com/marketplace/actions/gosec-security-checker      
          # go install github.com/securego/gosec/v2/cmd/gosec@latest
          # GHA at https://github.com/securego/gosec
          # gosec ./... >> ./bin/gosec.out
        # https://go.googlesource.com/vuln - govulncheck
        # go install golang.org/x/vuln/cmd/govulncheck@latest
        # govulncheck ./... >> ./bin/security/govuln.out        
        # go install honnef.co/go/tools/cmd/staticcheck@latest
        # staticcheck ./... >> ./bin/staticcheck.out

  # language-agnostic secrity check tools (OWASP dep-check)
  language-agnostic-precompilation-checks:
    # https://github.com/marketplace/actions/dependency-check & https://owasp.org/www-project-dependency-check/ 
    #     and flags at https://jeremylong.github.io/DependencyCheck/dependency-check-cli/arguments.html
    if: ${{ inputs.perform-complexity-checks == true }}
    runs-on: ubuntu-latest
    name: 'Language-agnostic pre-compilation steps'  
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: OWASP Dependency check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: github.event.repository.name
          path: '.'
          format: 'JSON'
          # out: 'reports' # this is the default, no need to specify unless you wish to override it
          args: >
            --enableRetired
            --prettyPrint
      - name: Upload Test results
        uses: actions/upload-artifact@v4
        with:
          name: OWASP dependency check report
          path: ${{github.workspace}}/reports
    # TODO: add flag --failOnCVSS 7
    # TODO: integrate with SonarQube
    # TODO: correct artifact upload names like Sonu's
              
  ################################################################################################################
  #
  #    Security source code SCA scans
  #
  ################################################################################################################
  
  # # security scans
  run-trufflehog:
    if: ${{ inputs.perform-trufflehog-scan == true }}
    uses: chef/common-github-actions/.github/workflows/trufflehog.yml@main
    needs: run-scc

  # run-srcclr:
  #   if: ${{ inputs.perform-srcclr-scan == true }}
  #   uses: chef/common-github-actions/.github/workflows/srcclr.yml@main
  #   needs: run-scc

  run-veracode-sca:
    if: ${{ inputs.perform-veracode-sca-scan == true }}
    uses: chef/common-github-actions/.github/workflows/veracode-sca.yml@main
    needs: run-scc
    secrets: inherit
      
  # # BLACKDUCK TOOLS
  # # updated to https://documentation.blackduck.com/bundle/bridge/page/documentation/c_download.html#polaris-download
  # # https://github.com/marketplace/actions/black-duck-security-scan
  # # for polaris, coverity, SRM (SBOM), and SCA (BlackDuck SCA) - Chef uses polaris and SBOM later in this script
  run-blackduck-sca:
    if: ${{ inputs.perform-blackduck-sca-scan == true }}
    uses: chef/common-github-actions/.github/workflows/blackduck-sca.yml@main
    needs: run-scc
    secrets: inherit 
            
  # ################################################################################################################
  # #
  # #    Build and packaging steps
  # #
  # ################################################################################################################
  
  ci-build:
    if : ${{ inputs.build == true }}
    needs: language-agnostic-precompilation-checks
    name: 'CI build and compilation steps'
    runs-on: ubuntu-latest
    steps:
      - name: BUILD
        run: echo 'BUILD STEP'
  #   runs-on: ubuntu-latest
  #   needs: language-agnostic-precompilation-checks
  #   name: 'CI build and compilation steps'  
  #   steps:
  #     - name: Build for Rust binary
  #       if: ${{ inputs.language == 'Rust' }}
  #       run: echo 'hello world'
  #       # cargo build --release --target-dir ./bin
  #     - name: Build for Ruby binary
  #       if: ${{ inputs.language == 'Ruby' }}
  #       run: echo 'hello world'
  #       # bundle install --path vendor/bundle
  #       # bundle exec rake build
  #     - name: Build for Go binary
  #       if: ${{ inputs.language == 'Go' }}
  #       run: echo 'hello world'
  #       # go build -o ./bin/chef-api ./cmd/chef-api/main.go

  # - name: Set up Go
    #   uses: actions/setup-go@v4
    #   with:
    #     go-version: 1.23.6
    
    # - name: Configure git for private modules
    #   env:
    #     GOPRIVATE: github.com/progress-platform-services/*
    #   run: git config --global url."https://${{ secrets.GH_TOKEN }}@github.com/".insteadOf "https://github.com/"
    
    # - name: Generate coverage files
    #   run: go test -v -coverprofile="coverage.out" ./... 
    # - name: Copy file
    #   run: mkdir -p test/coverage; cp coverage.out test/coverage/coverage.out

  # ci-package-binary:
  #   if: ${{ inputs.build == true && success() }}
  #   runs-on: ubuntu-latest
  #   needs: ci-build
  #   name: 'CI package binary steps'  
  #   steps:
  #     - name: Package for Rust binary
  #       if: ${{ inputs.language == 'Rust' }}
  #       run: echo 'hello world'
  #       # cargo package --target-dir ./bin
  #     - name: Package for Ruby binary
  #       if: ${{ inputs.language == 'Ruby' }}
  #       run: echo 'hello world'
  #       # bundle exec rake package
  #     - name: Package for Go binary
  #       if: ${{ inputs.language == 'Go' }}
  #       run: echo 'hello world'
  #       # go build -o ./bin/chef-api ./cmd/chef-api/main.go
          
  # ################################################################################################################
  # #
  # #    Unit tests and code quality checks
  # #
  # ################################################################################################################
  
  ci-unit-test: # FROM CHEF-VAULT
    if: ${{ inputs.unit-tests == true && success() }}
    name: 'Unittest'
    strategy:
      fail-fast: false
      matrix:
        os-version: [ubuntu-latest, ubuntu-22.04, macos-latest]   # ubuntu-22.04 was original chef-vault
        ruby-version: ['3.4'] # '2.7', '3.1', 
    runs-on: ${{ matrix.os-version }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up ruby version
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby-version }}
          bundler-cache: true
      - name: run specs
        run: bundle exec rake spec --trace
      - name: Simplecov Report
        uses: aki77/simplecov-report-action@v1  # TODO: archived action - replace with another simplecov 
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          failedThreshold: 90
          resultPath: coverage/.last_run.json

  #   runs-on: ubuntu-latest
  #   needs: ci-package-binary
  #   name: 'CI unit tests'
  #   steps:
  #     - name: Build for Rust binary
  #       if: ${{ inputs.language == 'Rust' }}
  #       run: echo 'hello world'
  #       # cargo test --target-dir ./bin 
  #     - name: Build for Ruby binary
  #       if: ${{ inputs.language == 'Ruby' }}
  #       run: echo 'hello world'
  #       # bundle exec rake test
  #       # bundle exec rake test:unit
  #       # bundle exec rake test:integration
  #       # bundle exec rake test:unit:rubocop

  #     - name: Build for Go binary
  #       if: ${{ inputs.language == 'Go' }}
  #       run: echo 'hello world'
  #       # go test -v ./... > ./bin/test.out

   # - name: Upload test coverage artifact
    #   uses: actions/upload-artifact@v4
    #   with:
    #     # Name of the artifact to upload.
    #     name: test-coverage.out
    #     # A file, directory or wildcard pattern that describes what to upload
    #     path: test/unittest/coverage.out
         
  # ################################################################################################################
  # #
  # #    Security DAST tests and scans
  # #
  # ################################################################################################################
  
  security-dast-tests-sonar-public:
    name: 'Security DAST tests and scans - Sonar on PUBLIC repo'
    if: ${{ inputs.perform-sonarqube-sca-scan == true && success() && inputs.visibility == 'public'}}
    needs: ci-build
    uses: chef/common-github-actions/.github/workflows/sonarqube-public-repo.yml@main
    secrets: inherit
    
  security-dast-tests-sonar-private:
    name: 'Security DAST tests and scans - Sonar on PRIVATE repo'
    if: ${{ inputs.perform-sonarqube-sca-scan == true && success() && inputs.visibility == 'private'}}
    needs: ci-build
    uses: chef/common-github-actions/.github/workflows/sonarqube-private-repo.yml@main
    secrets: inherit
  
  security-dast-tests-sonar-internal:
    name: 'Security DAST tests and scans - Sonar on INTERNAL repo'
    if: ${{ inputs.perform-sonarqube-sca-scan == true && success() && inputs.visibility == 'internal'}}
    needs: ci-build
    uses: chef/common-github-actions/.github/workflows/sonarqube-internal-repo.yml@main
    secrets: inherit

        # TODO: use the visibility of repo, so that we can GO_PRIVATE with secrets.GITHUB_TOKEN and set right runner for SQ on SONAR_TOKEN - public: ubuntu-latest-4-cores, private: ip-range-controlled
            
  # # older tool no longer used in Progress
  # # run-blackduck-coverity:
  # #   if: ${{ inputs.perform-blackduck-coverity == true }}
  # #   uses: chef/common-github-actions/.github/workflows/tools/blackduck-coverity.yml@main
  # #   needs: echo_inputs
  # #   secrets: inherit

  run-blackduck-polaris:
    if: ${{ inputs.perform-blackduck-polaris == true }}
    uses: chef/common-github-actions/.github/workflows/blackduck-polaris.yml@main
    needs: ci-build
    secrets: inherit

  # generate bills-of-materials
  calculate-sbom:
    if: ${{ inputs.generate-sbom == true }}
    uses: chef/common-github-actions/.github/workflows/sbom.yml@main
    needs: ci-build
    secrets: inherit